{"version":3,"file":"components-AlertModal-AlertModal-stories.ced955ad.iframe.bundle.js","mappings":";AAKA;AAGA;;AAIA;;;;;ACHA;;;AAUA;;;AAKA;;;;ACCA;;;AAGA;;AAEA;;;AAGA;AACA;;AAEA;;;;;;;AAUA;;;;;;;;;;;;AC9BA;;;;;;;;;;;;;;AAcA;;;;;AAKA;AA0BA;;;;;;;AASA;AACA;;AASA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;AAqBA;;;;AAUA;AACA;;;;;AAKA;;AAEA;;AAEA;;;;;AAWA;;;;;AAKA;AAGA;;;;AAWA;;AAKA;AACA","sources":["webpack://ddangkong-frontend/./src/components/AlertModal/AlertModal.styled.ts","webpack://ddangkong-frontend/./src/styles/utils/getSizeStyles.ts","webpack://ddangkong-frontend/./src/components/common/Button/Button.styled.ts","webpack://ddangkong-frontend/./src/components/common/Modal/Modal.styled.ts"],"sourcesContent":["import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nexport const alertModalTitle = css`\n  ${Theme.typography.headline3}\n`;\n\nexport const messageContainer = css`\n  text-align: center;\n`;\n\nexport const alertText = css`\n  word-break: keep-all;\n`;\n","import { css } from '@emotion/react';\n\nconst getSizeStyles = (size?: 'small' | 'medium' | 'large') => {\n  switch (size) {\n    case 'small':\n      return css`\n        width: 6.8rem;\n        padding: 0.8rem 0;\n      `;\n    case 'medium':\n      return css`\n        width: 12rem;\n        padding: 1.6rem 0;\n      `;\n    case 'large':\n      return css`\n        width: 32rem;\n        padding: 2rem 0;\n      `;\n    default:\n      return css`\n        width: 32rem;\n        padding: 2rem 0;\n      `;\n  }\n};\n\nexport default getSizeStyles;\n","import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\nimport getBorderRadius from '@/styles/utils/getBorderRadius';\nimport getFontSize from '@/styles/utils/getFontSize';\nimport getSizeStyles from '@/styles/utils/getSizeStyles';\n\ninterface ButtonLayoutProps {\n  disabled?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  radius?: 'small' | 'medium' | 'large';\n  fontSize?: 'small' | 'medium' | 'large';\n  bottom?: boolean;\n}\n\nexport const buttonLayout = ({\n  disabled,\n  size,\n  radius,\n  fontSize,\n  bottom,\n}: ButtonLayoutProps) => css`\n  display: flex;\n  justify-content: center;\n\n  ${getSizeStyles(size)};\n\n  border: none;\n  border-radius: ${getBorderRadius(radius)};\n\n  background-color: ${disabled ? Theme.color.peanut300 : Theme.color.peanut400};\n\n  font-weight: bold;\n  font-size: ${getFontSize(fontSize)};\n  cursor: ${disabled ? 'not-allowed' : 'pointer'};\n\n  ${bottom &&\n  css`\n    position: fixed;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100%;\n  `}\n`;\n\nexport const bottomButtonLayout = css`\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n`;\n","import { css } from '@emotion/react';\n\nimport { ModalProps } from './Modal';\n\nimport { Theme } from '@/styles/Theme';\n\nexport const modalBackdropLayout = css`\n  display: flex;\n  position: fixed;\n  justify-content: center;\n  align-items: center;\n\n  background-color: rgb(0 0 0 / 50%);\n  inset: 0;\n`;\n\nexport const modalContentWrapper = ({ position }: Pick<ModalProps, 'position'>) => css`\n  display: flex;\n  position: fixed;\n  left: 50%;\n  flex-direction: column;\n  gap: 1.6rem;\n  width: 28rem;\n  height: fit-content;\n  max-height: 70vh;\n  min-height: 1.2rem;\n  transform: translateX(-50%);\n  margin: 0;\n  padding: 2.4rem;\n  border: none;\n  border-radius: ${Theme.borderRadius.radius10};\n\n  background-color: white;\n  box-sizing: border-box;\n\n  ${(() => {\n    switch (position) {\n      case 'top':\n        return `\n          top: 0;\n          transform: translate(-50%, 0%);\n        `;\n      case 'bottom':\n        return `\n          bottom: 0;\n          transform: translate(-50%, 0%);\n        `;\n      case 'center':\n        return `\n          top: 50%;\n          transform: translate(-50%, -50%);\n        `;\n      default:\n        return `\n          top: 50%;\n          transform: translate(-50%, -50%);\n        `;\n    }\n  })()}\n`;\n\nexport const modalHeaderLayout = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 0;\n\n  font-weight: bold;\n`;\n\nexport const modalHeaderEmptyBox = (position: 'center' | 'left') => css`\n  display: ${position === 'center' ? 'block' : 'none'};\n  width: 1.6rem;\n`;\n\ninterface ModalTitleProps {\n  fontSize?: string;\n  fontWeight?: string;\n}\n\nexport const modalTitle = ({ fontSize = 'bold', fontWeight = '2rem' }: ModalTitleProps) => css`\n  font-weight: ${fontWeight};\n  font-size: ${fontSize};\n`;\n\nexport const modalIconButton = ({ imgSize = '1.6rem' }: { imgSize?: string }) => css`\n  width: ${imgSize};\n  height: ${imgSize};\n  padding: 0;\n  border: none;\n\n  &:focus {\n    outline: none;\n  }\n\n  img {\n    width: 100%;\n  }\n`;\n\ninterface ModalTextButtonProps {\n  buttonWidth?: string;\n  buttonHeight?: string;\n  fontSize?: string;\n  backgroundColor?: string;\n  fontColor?: string;\n}\n\nexport const modalTextButton = ({\n  buttonWidth = '100%',\n  buttonHeight = '100%',\n  fontSize = '1.6rem',\n  backgroundColor = Theme.color.peanut400,\n  fontColor = '#000000',\n}: ModalTextButtonProps) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${buttonWidth};\n  height: ${buttonHeight};\n  padding: 1rem;\n  border: none;\n  border-radius: 0.8rem;\n\n  background-color: ${backgroundColor};\n\n  color: ${fontColor};\n  font-weight: bold;\n  font-size: ${fontSize};\n\n  &:focus {\n    outline: none;\n  }\n`;\n\ninterface ModalContentProps {\n  fontSize?: string;\n}\n\nexport const modalContentLayout = ({ fontSize = '1.2rem' }: ModalContentProps) => css`\n  * {\n    box-sizing: border-box;\n  }\n\n  font-size: ${fontSize};\n`;\n\nexport const modalInputLayout = css`\n  width: 100%;\n  padding: 0.8rem;\n  border: 1px solid #000;\n`;\n\ninterface ModalFooterProps {\n  buttonPosition?: 'left' | 'center' | 'right';\n  buttonGap?: string;\n}\n\nexport const modalFooter = ({\n  buttonPosition = 'center',\n  buttonGap = '1.2rem',\n}: ModalFooterProps) => css`\n  display: flex;\n  justify-content: ${buttonPosition};\n  gap: ${buttonGap};\n`;\n"],"names":[],"sourceRoot":""}