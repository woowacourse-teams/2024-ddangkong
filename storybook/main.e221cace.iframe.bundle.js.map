{"version":3,"file":"main.e221cace.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AAtBA;;;;;;;;;;;;;;;;;;;;;;AC5HA;;;;AAIA;;;AAKA;;AAEA;;;;AAIA;;;AChCA;;;;;ADAA;;;;;;;;AAQA;;;;;ACuBA","sources":["webpack://ddangkong-frontend/./src/styles/GlobalStyle.ts","webpack://ddangkong-frontend/./src/providers/ToastProvider/ToastProvider.styled.ts","webpack://ddangkong-frontend/./src/providers/ToastProvider/ToastProvider.tsx"],"sourcesContent":["import { css } from '@emotion/react';\n\nconst reset = css`\n  html,\n  body,\n  div,\n  span,\n  applet,\n  object,\n  iframe,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  blockquote,\n  pre,\n  a,\n  abbr,\n  acronym,\n  address,\n  big,\n  cite,\n  code,\n  del,\n  dfn,\n  em,\n  img,\n  ins,\n  kbd,\n  q,\n  s,\n  samp,\n  small,\n  strike,\n  strong,\n  sub,\n  sup,\n  tt,\n  var,\n  b,\n  u,\n  i,\n  center,\n  dl,\n  dt,\n  dd,\n  ol,\n  ul,\n  li,\n  fieldset,\n  form,\n  label,\n  legend,\n  table,\n  caption,\n  tbody,\n  tfoot,\n  thead,\n  tr,\n  th,\n  td,\n  article,\n  aside,\n  canvas,\n  details,\n  embed,\n  figure,\n  figcaption,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  output,\n  ruby,\n  section,\n  summary,\n  time,\n  mark,\n  audio,\n  video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n\n    font-size: 100%;\n    vertical-align: baseline;\n  }\n\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  section {\n    display: block;\n  }\n\n  body {\n    color: black;\n    line-height: 1;\n  }\n\n  ol,\n  ul {\n    list-style: none;\n  }\n\n  blockquote,\n  q {\n    quotes: none;\n  }\n\n  blockquote::before,\n  blockquote::after,\n  q::before,\n  q::after {\n    content: '';\n    content: none;\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  button {\n    padding: 0;\n    border: none;\n\n    background-color: inherit;\n\n    outline: none;\n    cursor: pointer;\n\n    :enabled {\n      color: black;\n    }\n  }\n`;\n\nconst GlobalStyle = css`\n  ${reset}\n\n  html {\n    font-size: 10px;\n  }\n\n  #root {\n    max-width: 768px;\n    height: 100vh;\n    margin: 0 auto;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Pretendard Variable', Pretendard, sans-serif;\n  }\n\n  body {\n    overflow: hidden;\n  }\n`;\n\nexport default GlobalStyle;\n","import { css, keyframes } from '@emotion/react';\n\nimport { Theme } from '../../styles/Theme';\n\nexport const toastLayout = (isVisible: boolean) => css`\n  position: fixed;\n  bottom: 4.4rem;\n  left: 50%;\n  padding: 1rem 2rem;\n  border-radius: ${Theme.borderRadius.radius20};\n\n  background-color: rgb(0 0 0 / 80%);\n\n  color: white;\n  font-size: 1.2rem;\n  text-align: center;\n\n  animation: ${isVisible ? fadeIn : fadeOut} 0.5s ease forwards;\n  word-break: keep-all;\n  transform: translateX(-50%);\n  box-shadow: 0 0.2rem 0.4rem rgb(0 0 0 / 20%);\n  transition: opacity 0.3s ease-in-out;\n`;\n\nconst fadeIn = keyframes`\n  from {\n    opacity: ${Theme.opacity.invisible};\n    transform: translateX(-50%) translateY(1rem);\n  }\n  to {\n    opacity: ${Theme.opacity.default};\n    transform: translateX(-50%) translateY(0);\n  }\n`;\n\nconst fadeOut = keyframes`\n  from {\n    opacity: ${Theme.opacity.invisible};\n    transform: translateX(-50%) translateY(0);\n  }\n  to {\n    opacity: ${Theme.opacity.default};\n    transform: translateX(-50%) translateY(1rem);\n  }\n`;\n","import { PropsWithChildren, useCallback, useEffect, useRef, useState, createContext } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { toastLayout } from './ToastProvider.styled';\n\ninterface ToastContext {\n  showToast: (message: string) => void;\n}\n\nexport const ToastContext = createContext<ToastContext | null>(null);\n\nconst ToastProvider = ({ children }: PropsWithChildren) => {\n  const [toastMessage, setToastMessage] = useState('');\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const showToast = useCallback((message: string) => {\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n\n    timerRef.current = setTimeout(() => {\n      setToastMessage('');\n    }, 2000);\n\n    setToastMessage(message);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      {children}\n      {toastMessage &&\n        createPortal(\n          <div css={toastLayout(Boolean(toastMessage))}>{toastMessage}</div>,\n          document.body,\n        )}\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider;\n"],"names":[],"sourceRoot":""}