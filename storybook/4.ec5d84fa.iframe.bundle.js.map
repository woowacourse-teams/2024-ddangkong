{"version":3,"file":"4.ec5d84fa.iframe.bundle.js","mappings":";;;;;;;AAWA;;;AAKA;AACA;;AAIA;;;;ACRA;ACRA;AAGA;;AAIA;;;;;;AAMA;;;AAKA;;;AAGA;;AAEA;;;;;;;;;;;;;;;;ACRA;;;;;;;AASA;;;AAKA;;;AAKA;;;AAGA;;;;AAMA;;;;;;;;;AASA;AACA;AACA;;;;;;;;;;;;;AAeA;AACA;;;;;;;AAOA;;ACCA","sources":["webpack://ddangkong-frontend/./src/components/RoomSettingModal/RoomSettingContainer/RoomSettingContainer.styled.ts","webpack://ddangkong-frontend/./src/components/RoomSettingModal/RoomSettingContainer/RoomSettingContainer.tsx","webpack://ddangkong-frontend/./src/components/RoomSettingModal/RoomSettingModal.styled.ts","webpack://ddangkong-frontend/./src/components/common/Dropdown/Dropdown.styled.ts","webpack://ddangkong-frontend/./src/components/common/Dropdown/Dropdown.tsx"],"sourcesContent":["import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nexport const roomSettingTitleContainer = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n`;\n\nexport const roomSettingTitleWrapper = css`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const roomSettingTitle = css`\n  ${Theme.typography.body2};\n  font-weight: 700;\n`;\n\nexport const roomSettingButtonContainer = css`\n  display: flex;\n  justify-content: center;\n  gap: 1.6rem;\n`;\n","import { PropsWithChildren } from 'react';\n\nimport {\n  roomSettingButtonContainer,\n  roomSettingTitle,\n  roomSettingTitleContainer,\n  roomSettingTitleWrapper,\n} from './RoomSettingContainer.styled';\n\ninterface RoomSettingContainerProps {\n  title: '카테고리' | '총 라운드' | '제한 시간';\n}\n\nconst RoomSettingContainer = ({\n  children,\n  title,\n}: PropsWithChildren<RoomSettingContainerProps>) => {\n  return (\n    <div css={roomSettingTitleContainer}>\n      <div css={roomSettingTitleWrapper}>\n        <span css={roomSettingTitle}>{title}</span>\n      </div>\n      {title === '카테고리' ? (\n        children\n      ) : (\n        <ul css={roomSettingButtonContainer} role=\"radiogroup\">\n          {children}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default RoomSettingContainer;\n","import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nexport const roomSettingModalLayout = css`\n  background-color: ${Theme.color.peanut300};\n`;\n\nexport const roomSettingModalTitle = css`\n  font-size: 1.6rem;\n`;\n\nexport const roomSettingContainer = css`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  gap: 2.4rem;\n  padding: 1.6rem;\n  border-radius: ${Theme.borderRadius.radius10};\n\n  background-color: white;\n`;\n\nexport const roomSettingButton = (isSelected: boolean) => css`\n  width: 4rem;\n  height: 4rem;\n  border-radius: ${Theme.borderRadius.radius10};\n\n  background-color: ${isSelected ? Theme.color.peanut500 : Theme.color.peanut300};\n  transition: background-color 0.3s;\n`;\n","import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nexport const dropdownLayout = css`\n  display: flex;\n  position: relative;\n  align-items: center;\n\n  width: 16rem;\n  height: 3.6rem;\n  padding: 0.8rem;\n  border: 1px solid black;\n  border-radius: 0.8rem;\n\n  background-color: white;\n\n  cursor: pointer;\n`;\n\nexport const dropdownTextContainer = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  user-select: none;\n`;\n\nexport const emptyWrapper = css`\n  width: 1.2rem;\n  height: 1.2rem;\n`;\n\nexport const arrowImage = css`\n  width: 1.2rem;\n  height: 1.2rem;\n`;\n\nexport const dropdownText = css`\n  text-align: center;\n\n  ${Theme.typography.body2}\n\n  user-select: none;\n  cursor: pointer;\n`;\n\nexport const selectOptionList = (isOpen: boolean, count: number) => css`\n  display: flex;\n  overflow: hidden;\n  position: absolute;\n  top: 3.6rem;\n  left: 0;\n  flex-direction: column;\n\n  width: 100%;\n  height: ${isOpen ? `${3.6 * count}rem` : 0};\n  border: ${isOpen ? `1px solid ${Theme.color.gray200}` : 'none'};\n  border-radius: ${Theme.borderRadius.radius10};\n\n  background-color: white;\n\n  color: black;\n\n  list-style: none;\n  transition: height 0.3s;\n  user-select: none;\n`;\n\nexport const optionButton = (isSelected: boolean) => css`\n  width: 100%;\n  height: 3.6rem;\n\n  ${Theme.typography.caption}\n  background-color: ${isSelected ? Theme.color.gray300 : 'white'};\n\n  color: black;\n\n  transition: background-color 0.1s ease-in;\n\n  &:hover {\n    background-color: ${Theme.color.gray200};\n  }\n`;\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport {\n  arrowImage,\n  dropdownLayout,\n  dropdownText,\n  dropdownTextContainer,\n  emptyWrapper,\n  optionButton,\n  selectOptionList,\n} from './Dropdown.styled';\n\nimport ArrowDown from '@/assets/images/arrowDown.svg';\nimport ArrowUp from '@/assets/images/arrowUp.svg';\n\ninterface DropdownProps<T> {\n  text: string;\n  optionList: T[];\n  handleClickOption: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst Dropdown = <T extends { value: string; label: string }>({\n  text,\n  optionList,\n  handleClickOption,\n}: DropdownProps<T>) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n  const triggerRef = useRef<HTMLButtonElement | null>(null);\n\n  const handleToggleDropdown = () => {\n    setIsOpen((prev) => !prev);\n    triggerRef.current?.focus();\n  };\n\n  const handleSelectOption = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    handleClickOption(e);\n    handleToggleDropdown();\n  };\n\n  useEffect(() => {\n    const handleOutsideClose = (e: MouseEvent) => {\n      if (isOpen && dropdownRef.current && !dropdownRef.current.contains(e.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('click', handleOutsideClose);\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClose);\n    };\n  }, [isOpen]);\n\n  return (\n    <div css={dropdownLayout} ref={dropdownRef}>\n      <button\n        ref={triggerRef}\n        onClick={handleToggleDropdown}\n        aria-haspopup=\"listbox\"\n        aria-expanded={isOpen}\n        aria-controls=\"dropdown-listbox\"\n        aria-label={`카테고리 선택 목록, 현재 선택: ${text || '선택해주세요'}`}\n        css={dropdownTextContainer}\n      >\n        <div css={emptyWrapper}></div>\n        <span css={dropdownText}>{text || '선택해주세요'}</span>\n        <div>\n          <img src={isOpen ? ArrowUp : ArrowDown} alt=\"\" css={arrowImage} />\n        </div>\n      </button>\n\n      {isOpen && (\n        <ul\n          id=\"dropdown-listbox\"\n          role=\"listbox\"\n          aria-labelledby=\"dropdown-button\"\n          css={selectOptionList(isOpen, optionList.length)}\n        >\n          {optionList.map((option) => (\n            <li key={option.value} role=\"option\" aria-selected={text === option.label}>\n              <button\n                css={optionButton(text === option.label)}\n                value={option.value}\n                onClick={handleSelectOption}\n              >\n                {option.label}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n"],"names":[],"sourceRoot":""}