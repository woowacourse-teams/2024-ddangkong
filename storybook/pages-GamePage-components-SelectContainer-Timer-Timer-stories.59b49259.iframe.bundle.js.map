{"version":3,"file":"pages-GamePage-components-SelectContainer-Timer-Timer-stories.59b49259.iframe.bundle.js","mappings":";AAKA;AAGA;;AAIA;;;;;;;;;;;;;ACHA;;;;;;;;;;;;;;;;;;;;;;;;;ACsBA;;;;;;;AASA;;;;;;;AASA;;;;;;;AAOA;;AAEA;;AAIA;;;;;;;AAOA;;AAEA;;;;AAIA;AAGA;;;;;;;;;;AAUA;AAGA;;;;AAMA;AACA;AAGA;;;;AAIA","sources":["webpack://ddangkong-frontend/./src/components/AlertModal/AlertModal.styled.ts","webpack://ddangkong-frontend/./src/components/common/a11yOnly/A11yOnly.tsx","webpack://ddangkong-frontend/./src/pages/GamePage/components/SelectContainer/Timer/Timer.styled.ts"],"sourcesContent":["import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nexport const alertModalTitle = css`\n  ${Theme.typography.headline3}\n`;\n\nexport const messageContainer = css`\n  text-align: center;\n`;\n\nexport const alertText = css`\n  word-break: keep-all;\n`;\n","import { ElementType, AriaRole, PropsWithChildren } from 'react';\n\nimport { a11yOnlyLayout } from './A11yOnly.styled';\n\ninterface A11yOnlyProps<T extends ElementType = 'span'> {\n  as?: T;\n  role?: AriaRole;\n}\n\nconst A11yOnly = <T extends ElementType = 'span'>({\n  as,\n  children,\n  ...props\n}: PropsWithChildren<A11yOnlyProps<T>>) => {\n  const Component = as || 'span';\n  return (\n    <Component css={a11yOnlyLayout} {...props}>\n      {children}\n    </Component>\n  );\n};\n\nexport default A11yOnly;\n","import { css, keyframes } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nconst shake = keyframes`\n  0%{\n      transform: rotate(0deg);\n    }\n    10%{\n      transform: scale(1.5) rotate(45deg);\n    }\n    20%{\n      transform: scale(1.5) rotate(-45deg);\n    }\n    30%{\n      transform:  rotate(30deg);\n    }\n    40%{\n      transform:  rotate(-30deg);\n    }\n    50%{\n      transform: rotate(10deg);\n    }\n    60%{\n      transform: rotate(-10deg);\n    }\n    100%{\n      transform: rotate(0deg);\n    }\n`;\n\nconst progress = keyframes`\n  0% {\n      transform: scaleX(1);\n  }\n  100% {\n      transform: scaleX(0);\n    }\n`;\n\nconst timerTransition = keyframes`\n  0% {\n      transform: translateX(0);\n  }\n  100%{\n      transform: translateX(-95%);\n  }\n`;\n\nexport const timerLayout = css`\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 3.2rem;\n  padding: 0 1rem;\n  border-radius: ${Theme.borderRadius.radius30};\n\n  background-color: ${Theme.color.peanut200};\n  box-sizing: border-box;\n`;\n\nexport const timerInnerLayout = (timeLimit: number) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 60%;\n  border-radius: ${Theme.borderRadius.radius30};\n\n  background-color: ${Theme.color.peanut500};\n\n  transform-origin: left;\n\n  animation: ${progress} ${timeLimit + 1}s linear;\n`;\n\nexport const timerWrapper = (timeLimit: number) => css`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-end;\n\n  width: 100%;\n  height: 4rem;\n\n  animation: ${timerTransition} ${timeLimit + 1}s linear;\n`;\n\nexport const timerIcon = css`\n  position: absolute;\n  width: 4.8rem;\n  height: 4.8rem;\n`;\n\nexport const timerIconShake = css`\n  animation: ${shake} 1s linear infinite;\n`;\n\nexport const timerText = (isAlmostFinished: boolean) => css`\n  position: absolute;\n  top: 5.2rem;\n\n  color: ${isAlmostFinished ? 'red' : 'black'};\n  font-weight: bold;\n  font-size: 1.6rem;\n`;\n"],"names":[],"sourceRoot":""}