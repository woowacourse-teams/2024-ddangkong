{"version":3,"file":"pages-GamePage-GamePage-stories.d58c7f84.iframe.bundle.js","mappings":";;;;;;;;AAYA;;;;;;;;;;;;;;;ACDA;;;AAKA;;;;;AAKA;;;;;;;;;ACZA;;;AAUA;;;AAKA;;;;ACCA;;;AAGA;;AAEA;;;AAGA;AACA;;AAEA;;;;;;;AAUA;;;;;;;;;;;AC1CA;;;;;;;;;ACSA;AACA;AACA;;;;;;;;;;;AAWA;ACTA;;;;;;;;;;;;;;;;;;;;;;;;;ACcA;;;;;;;AASA;;;;;;;AASA;;;;;;;AAOA;;AAEA;;AAIA;;;;;;;AAOA;;AAEA;;;;AAIA;AAGA;;;;;;;;;;AAUA;AAGA;;;;AAMA;AACA;AAGA;;;;AAIA","sources":["webpack://ddangkong-frontend/./src/pages/GamePage/components/SelectContainer/SelectContainer.styled.ts","webpack://ddangkong-frontend/./src/components/TopicContainer/TopicContainer.styled.ts","webpack://ddangkong-frontend/./src/styles/utils/getSizeStyles.ts","webpack://ddangkong-frontend/./src/components/common/Button/Button.styled.ts","webpack://ddangkong-frontend/./src/components/layout/Content/Content.tsx","webpack://ddangkong-frontend/./src/pages/GamePage/components/SelectContainer/SelectOption/SelectOption.styled.ts","webpack://ddangkong-frontend/./src/pages/GamePage/components/SelectContainer/SelectOption/SelectOption.tsx","webpack://ddangkong-frontend/./src/pages/GamePage/components/SelectContainer/Timer/Timer.styled.ts"],"sourcesContent":["import { css } from '@emotion/react';\n\nexport const selectContainerLayout = css`\n  display: flex;\n  flex-basis: 40%;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  gap: 5.6rem;\n  width: 100%;\n`;\n\nexport const selectSection = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1.2rem;\n\n  font-weight: bold;\n  font-size: 2rem;\n`;\n","import { css } from '@emotion/react';\n\nexport const topicContainerLayout = css`\n  display: flex;\n  flex-basis: 20%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2rem;\n`;\n\nexport const categoryText = css`\n  font-weight: bold;\n  font-size: 1.2rem;\n`;\n\nexport const topicText = (isGamePage: boolean) => css`\n  font-weight: bold;\n  font-size: 1.6rem;\n  line-height: 2rem;\n\n  ${!isGamePage &&\n  css`\n    width: 85%;\n\n    text-align: center;\n    word-break: keep-all;\n  `}\n`;\n","import { css } from '@emotion/react';\n\nconst getSizeStyles = (size?: 'small' | 'medium' | 'large') => {\n  switch (size) {\n    case 'small':\n      return css`\n        width: 6.8rem;\n        padding: 0.8rem 0;\n      `;\n    case 'medium':\n      return css`\n        width: 12rem;\n        padding: 1.6rem 0;\n      `;\n    case 'large':\n      return css`\n        width: 32rem;\n        padding: 2rem 0;\n      `;\n    default:\n      return css`\n        width: 32rem;\n        padding: 2rem 0;\n      `;\n  }\n};\n\nexport default getSizeStyles;\n","import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\nimport getBorderRadius from '@/styles/utils/getBorderRadius';\nimport getFontSize from '@/styles/utils/getFontSize';\nimport getSizeStyles from '@/styles/utils/getSizeStyles';\n\ninterface ButtonLayoutProps {\n  disabled?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  radius?: 'small' | 'medium' | 'large';\n  fontSize?: 'small' | 'medium' | 'large';\n  bottom?: boolean;\n}\n\nexport const buttonLayout = ({\n  disabled,\n  size,\n  radius,\n  fontSize,\n  bottom,\n}: ButtonLayoutProps) => css`\n  display: flex;\n  justify-content: center;\n\n  ${getSizeStyles(size)};\n\n  border: none;\n  border-radius: ${getBorderRadius(radius)};\n\n  background-color: ${disabled ? Theme.color.peanut300 : Theme.color.peanut400};\n\n  font-weight: bold;\n  font-size: ${getFontSize(fontSize)};\n  cursor: ${disabled ? 'not-allowed' : 'pointer'};\n\n  ${bottom &&\n  css`\n    position: fixed;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100%;\n  `}\n`;\n\nexport const bottomButtonLayout = css`\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n`;\n","import { PropsWithChildren } from 'react';\n\nimport { contentLayout } from './Content.styled';\n\nconst Content = ({ children }: PropsWithChildren) => {\n  return <section css={contentLayout}>{children}</section>;\n};\n\nexport default Content;\n","import { css } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nexport const SelectOptionLayout = (selected: boolean, isSelected: boolean) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 11.6rem;\n  height: 16.8rem;\n  padding: 1.6rem;\n  border-radius: 3rem;\n\n  background-color: ${selected ? Theme.color.peanut500 : Theme.color.peanut300};\n  cursor: ${isSelected ? 'not-allowed' : 'pointer'};\n  opacity: ${isSelected ? Theme.opacity.disabled : Theme.opacity.default};\n\n  color: #000;\n  font-weight: bold;\n  font-size: 1.6rem;\n  line-height: 2.4rem;\n  text-align: center;\n\n  word-break: keep-all;\n\n  transition: all 0.5s;\n  scale: ${selected ? 1.1 : 1};\n`;\n","import { SelectOptionLayout } from './SelectOption.styled';\n\nimport { BalanceContent, SelectedOption } from '@/types/balanceContent';\n\ninterface SelectOptionProps {\n  option: BalanceContent['firstOption'];\n  selectedOption: SelectedOption;\n  handleClickOption: (selectedId: number) => void;\n}\n\nconst SelectOption = ({ option, selectedOption, handleClickOption }: SelectOptionProps) => {\n  const { id: selectedId, isVoted } = selectedOption;\n\n  return (\n    <button\n      role=\"radio\"\n      css={SelectOptionLayout(selectedId === option.optionId, isVoted)}\n      onClick={() => handleClickOption(option.optionId)}\n      disabled={isVoted}\n      aria-checked={selectedId === option.optionId}\n    >\n      {option.name}\n    </button>\n  );\n};\n\nexport default SelectOption;\n","import { css, keyframes } from '@emotion/react';\n\nimport { Theme } from '@/styles/Theme';\n\nconst shake = keyframes`\n  0%{\n      transform: rotate(0deg);\n    }\n    10%{\n      transform: scale(1.5) rotate(45deg);\n    }\n    20%{\n      transform: scale(1.5) rotate(-45deg);\n    }\n    30%{\n      transform:  rotate(30deg);\n    }\n    40%{\n      transform:  rotate(-30deg);\n    }\n    50%{\n      transform: rotate(10deg);\n    }\n    60%{\n      transform: rotate(-10deg);\n    }\n    100%{\n      transform: rotate(0deg);\n    }\n`;\n\nconst progress = keyframes`\n  0% {\n      transform: scaleX(1);\n  }\n  100% {\n      transform: scaleX(0);\n    }\n`;\n\nconst timerTransition = keyframes`\n  0% {\n      transform: translateX(0);\n  }\n  100%{\n      transform: translateX(-95%);\n  }\n`;\n\nexport const timerLayout = css`\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 3.2rem;\n  padding: 0 1rem;\n  border-radius: ${Theme.borderRadius.radius30};\n\n  background-color: ${Theme.color.peanut200};\n  box-sizing: border-box;\n`;\n\nexport const timerInnerLayout = (timeLimit: number) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 60%;\n  border-radius: ${Theme.borderRadius.radius30};\n\n  background-color: ${Theme.color.peanut500};\n\n  transform-origin: left;\n\n  animation: ${progress} ${timeLimit + 1}s linear;\n`;\n\nexport const timerWrapper = (timeLimit: number) => css`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-end;\n\n  width: 100%;\n  height: 4rem;\n\n  animation: ${timerTransition} ${timeLimit + 1}s linear;\n`;\n\nexport const timerIcon = css`\n  position: absolute;\n  width: 4.8rem;\n  height: 4.8rem;\n`;\n\nexport const timerIconShake = css`\n  animation: ${shake} 1s linear infinite;\n`;\n\nexport const timerText = (isAlmostFinished: boolean) => css`\n  position: absolute;\n  top: 5.2rem;\n\n  color: ${isAlmostFinished ? 'red' : 'black'};\n  font-weight: bold;\n  font-size: 1.6rem;\n`;\n"],"names":[],"sourceRoot":""}